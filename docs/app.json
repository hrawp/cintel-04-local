[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nfrom shiny import render, reactive, req\nfrom shinywidgets import render_widget\nimport seaborn as sns\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Penguin Data by Aaron\", fillable=True)\n#with ui.layout_columns():\n\n#    @render_plotly\n#    def plot1():\n #       return px.histogram(px.data.tips(), y=\"tip\")\n\n#    @render_plotly\n#    def plot2():\n #       return px.histogram(px.data.tips(), y=\"total_bill\")\n\n# Add a Shiny UI sidebar for user interaction\nwith ui.sidebar():\n# Set the open parameter to \"open\" to make the sidebar open by default\n# Use a with block to add content to the sidebar\n\n# Use the ui.h2() function to add a 2nd level header to the sidebar\n    ui.h2(\"Sidebar\")\n#   pass in a string argument (in quotes) to set the header text to \"Sidebar\"\n\n    ui.input_selectize(\"selected_attribute\",\"Penguin's Characteristics\",\n                      [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]) # to create a dropdown input to choose a column\n#   pass in three arguments:\n#   the name of the input (in quotes), e.g., \"selected_attribute\"\n#   the label for the input (in quotes)\n#   a list of options for the input (in square brackets) \n#   e.g. [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Bins\",0) #to create a numeric input for the number of Plotly histogram bins\n#   pass in two arguments:\n#   the name of the input (in quotes), e.g. \"plotly_bin_count\"\n#   the label for the input (in quotes)\n\n    ui.input_slider(\"seaborn_bin_count\",\"Choose number of bars\",0,100,20) # to create a slider input for the number of Seaborn bins\n#   pass in four arguments:\n#   the name of the input (in quotes), e.g. \"seaborn_bin_count\"\n#   the label for the input (in quotes)\n#   the minimum value for the input (as an integer)\n#   the maximum value for the input (as an integer)\n#   the default value for the input (as an integer)\n\n    ui.input_checkbox_group(\"selected_species_list\",\"Species\",\n                           [\"Adelie\", \"Gentoo\", \"Chinstrap\"],selected=[\"Gentoo\"],inline=\"True\") #to create a checkbox group input to filter the species\n#   pass in five arguments:\n#   the name of the input (in quotes), e.g.  \"selected_species_list\"\n#   the label for the input (in quotes)\n#   a list of options for the input (in square brackets) as [\"Adelie\", \"Gentoo\", \"Chinstrap\"]\n#   a keyword argument selected= a list of selected options for the input (in square brackets)\n#   a keyword argument inline= a Boolean value (True or False) as you\n    ui.hr() #to add a horizontal rule to the sidebar\n    ui.a(\"Link to my GitHub\",href=\"https://github.com/hrawp/cintel-03-reactive\",target= \"_blank\") #to add a hyperlink to the sidebar\n#   pass in two arguments:\n#   the text for the hyperlink (in quotes), e.g. \"GitHub\"\n#   a keyword argument href= the URL for the hyperlink (in quotes), e.g. your GitHub repo URL\n#   a keyword argument target= \"_blank\" to open the link in a new tab\n\n# When passing in multiple arguments to a function, separate them with commas.\n\n\n#ui.h6(\"Palmer Penguins Grid View\")\n\nwith ui.layout_columns():\n    with ui.card():        \n        ui.card_header(\"Palmer Penguins Seaborn Histogram\") \n        @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n        def plot_histogram():  \n            ax = sns.histplot(filtered_data(), x=\"body_mass_g\", bins=input.seaborn_bin_count())  \n            ax.set_title(\"Penguin Mass\")\n            ax.set_xlabel(\"Mass (g)\")\n            ax.set_ylabel(\"Count\")\n            return ax \n        \n\n\n#ui.h4(\"Palmer Penguins Plotly Histogram\")\nwith ui.layout_columns():\n    with ui.card():        \n        ui.card_header(\"Palmer Penguins Plotly Histogram\")    \n        @render_widget  \n        def create_histogram_plot():  \n            scatterplot = px.histogram(\n                data_frame=filtered_data(),\n                x=\"body_mass_g\",\n                nbins=input.plotly_bin_count(),\n            ).update_layout(\n                title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=\"Body Mass (g)\",\n            )    \n            return scatterplot  \n\n\n\n#ui.h4(\"Palmer Penguins Seaborn Histogram\")\n    with ui.card():        \n        ui.card_header(\"Palmer Penguins Grid View\") \n        @render.data_frame  \n        def penguins_Grid_df():\n            return render.DataGrid(filtered_data()) \n    \n#    with ui.card():        \n#        ui.card_header(\"Palmer Penguins Total Bill\")\n #       @render_plotly\n#        def plot2():\n#            return px.histogram(px.data.tips(), y=\"total_bill\")\n\n\nwith ui.layout_columns():\n    with ui.card():        \n        ui.card_header(\"Plotly Scatterplot: Species\")\n        @render_plotly\n        def plotly_scatterplot():\n                return px.scatter(filtered_data(),\n                    x=input.selected_attribute(),\n                    y=\"body_mass_g\",\n                    color=\"species\",\n                    title=\"Penguins Plot (Plotly Express)\",\n                    labels={\n                        \"bill_length_mm\": \"Bill Length (mm)\",\n                        \"body_mass_g\": \"Body Mass (g)\",\n                    },\n                    size_max=8, # set the maximum marker size\n                )\n\n#ui.h6(\"Palmer Penguins Table View\")\n    with ui.card():\n        ui.card_header(\"Palmer Penguins Table View\")\n        @render.data_frame  \n        def penguins_table_df():\n            return render.DataTable(filtered_data()) \n\n#    with ui.card():\n#        ui.card_header(\"Palmer Penguins Tips\")            \n#        @render_plotly\n#        def plot1():\n#            return px.histogram(px.data.tips(), y=\"tip\")\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n#@reactive.calc\n#def filtered_data():\n#    return penguins_df\n\n\n@reactive.calc\ndef filtered_data():\n\n    # The required function req() is used to ensure that\n    # the input.selected_species_list() function is not empty.\n    req(input.selected_species_list())\n\n    # If empty, req() will stop the execution and \n    # we'll just wait until the associated input changes to not empty.\n    # If not empty, we'll continue and filter the data.\n    isSpeciesMatch = penguins_df[\"species\"].isin(input.selected_species_list())\n\n    return penguins_df[isSpeciesMatch]\n", "type": "text"}]